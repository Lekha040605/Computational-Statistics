# Import required libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns
import gdown

# Load the dataset from Google Drive
url = 'https://drive.google.com/uc?id=10hS2oAMUj-S-Lx-0Clia12ZKfbPzbYpN'  # Change to direct link format
data = pd.read_csv(url)

# Display first few rows of the dataset
print("Dataset Preview:")
print(data.head())

# Data Preprocessing
# Check for missing values and fill or drop them
print("Checking for missing values...")
print(data.isnull().sum())
data = data.fillna(data.mean())  # Filling missing values with column mean

# Encode categorical variables if any
data = pd.get_dummies(data, drop_first=True)

# Feature Selection
X = data.drop(['Price'], axis=1)  # Assuming 'Price' is the target column
y = data['Price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Model Evaluation
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Root Mean Squared Error (RMSE): {rmse}")

# Visualization of Actual vs. Predicted Prices
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.7, color='b')
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--', color='red')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs. Predicted Prices')
plt.show()

# Optional: Correlation Heatmap of Features
plt.figure(figsize=(12, 8))
sns.heatmap(data.corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Feature Correlation Heatmap")
plt.show()
