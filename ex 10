import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
np.random.seed(0)
data = np.random.rand(200, 2)
plt.figure(figsize=(8, 6))
plt.scatter(data[:, 0], data[:, 1], c='blue', alpha=0.5)
plt.title('Original Data Plot')
plt.show()
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)
plt.figure(figsize=(8, 6))
plt.scatter(data_scaled[:, 0], data_scaled[:, 1], c='blue', alpha=0.5)
plt.title('Standardized Data plot')
plt.show()
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=0)
    kmeans.fit(data_scaled)
    wcss.append(kmeans.inertia_)
plt.figure(figsize=(8, 6))
plt.plot(range(1, 11), wcss, marker='o')
plt.title('Elbow Graph for identifying the number of clusters')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()
kmeans = KMeans(n_clusters=3, init='k-means++', random_state=0)
kmeans.fit(data_scaled)
labels = kmeans.labels_
plt.figure(figsize=(8, 6))
plt.scatter(data_scaled[:, 0], data_scaled[:, 1], c=labels, cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', s=200, alpha=0.5)
plt.title('Scatter plot to show the Clustering')
plt.show()
